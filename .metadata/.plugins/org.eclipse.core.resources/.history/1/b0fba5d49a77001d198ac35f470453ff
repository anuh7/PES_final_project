/*
 * mma8451.c
 *
 *  Created on: 06-Dec-2022
 *      Author: ROTODYNE
 */


#include <MKL25Z4.H>
#include "mma8451.h"
#include "i2c.h"
#include "delay.h"
#include "fsl_debug_console.h"
#include <math.h>

//defined variables for device and register address
#define MMA_ADDR 0x3A

#define REG_XHI 0x01
#define REG_XLO 0x02
#define REG_YHI 0x03
#define REG_YLO 0x04
#define REG_ZHI	0x05
#define REG_ZLO 0x06

#define REG_WHOAMI 0x0D
#define REG_CTRL1  0x2A
#define REG_CTRL4  0x2D

#define WHOAMI 0x1A

#define COUNTS_PER_G (4096.0)
#define M_PI (3.14159265)

int16_t acc_X=0, acc_Y=0, acc_Z=0;

extern uint32_t DATA_READY;				//mma data ready


int init_mma() {

	i2c_write_byte(MMA_ADDR, REG_CTRL1, 0x01);
	return 1;
}

void read_full_xyz() {
	int i;
	uint8_t data[6];
	int16_t temp[3];

	i2c_start();
	i2c_read_setup(MMA_ADDR , REG_XHI);

	for( i=0; i<5; i++)	{
		data[i] = i2c_repeated_read(0);		// Read five bytes in repeated mode
	}

	data[i] = i2c_repeated_read(1);			// Read last byte ending repeated mode

	for ( i=0; i<3; i++ ) {
		temp[i] = (int16_t) ((data[2*i]<<8) | data[2*i+1]);			//format the data into 3 acceleration vectors
	}

	acc_X = temp[0]/4;						// Align for 14 bits
	acc_Y = temp[1]/4;
	acc_Z = temp[2]/4;
}

void read_full_xyz_test() {
	int i;
	uint8_t data[6];
	int16_t temp[3];

	i2c_start();
	i2c_read_setup(MMA_ADDR , REG_XHI);					//set up i2c read with the mma device address

	for( i=0; i<5; i++)	{
		data[i] = i2c_repeated_read(0);					// Read five bytes in repeated mode
	}

	data[i] = i2c_repeated_read(1);						// Read last byte ending repeated mode

	for ( i=0; i<3; i++ ) {
		temp[i] = (int16_t) ((data[2*i]<<8) | data[2*i+1]);
	}

	acc_X = temp[0]/4;									// Align for 14 bits
	acc_Y = temp[1]/4;
	acc_Z = temp[2]/4;
}

float convert_to_roll() {
	float	ay = acc_Y/COUNTS_PER_G,
			az = acc_Z/COUNTS_PER_G;

	return atan2(ay, az)*180/M_PI;					//calculation for roll angle
}

float convert_to_pitch() {
	float ax = acc_X/COUNTS_PER_G,
			ay = acc_Y/COUNTS_PER_G,
			az = acc_Z/COUNTS_PER_G;

	return atan2(ax, sqrt(ay*ay + az*az))*180/M_PI;		//calculations for pitch angle
}

