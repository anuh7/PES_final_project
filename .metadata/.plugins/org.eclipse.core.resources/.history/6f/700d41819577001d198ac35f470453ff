/*
 * @i2c.c
 * @brief
 *
 * This file has the tone_to_samples function to calculate samples for each frequency, initializations to
 * DAC, TPM0, DMA, DMA interrupt.
 *
 * @date 09-Dec-2022
 * @author Anuhya
 * @attributions: https://github.com/alexander-g-dean/ESF/blob/master/NXP/Code/Chapter_8/I2C-Demo/src/i2c.c
 */

#include <MKL25Z4.H>
#include "i2c.h"


#define I2C_M_START 	I2C0->C1 |= I2C_C1_MST_MASK				//defined variables for I2C operations
#define I2C_M_STOP  	I2C0->C1 &= ~I2C_C1_MST_MASK
#define I2C_M_RSTART 	I2C0->C1 |= I2C_C1_RSTA_MASK

#define I2C_TRAN			I2C0->C1 |= I2C_C1_TX_MASK
#define I2C_REC				I2C0->C1 &= ~I2C_C1_TX_MASK

#define BUSY_ACK 	    while(I2C0->S & 0x01)
#define TRANS_COMP		while(!(I2C0->S & 0x80))
#define I2C_WAIT 			i2c_wait();

#define NACK 	        I2C0->C1 |= I2C_C1_TXAK_MASK
#define ACK           I2C0->C1 &= ~I2C_C1_TXAK_MASK

int lock_detect=0;
int i2c_lock=0;



void i2c_init(void)
{
	SIM->SCGC4 |= SIM_SCGC4_I2C0_MASK;				//clock i2c peripheral and port E
	SIM->SCGC5 |= (SIM_SCGC5_PORTE_MASK);

	PORTE->PCR[24] |= PORT_PCR_MUX(5);				//set pins to I2C function
	PORTE->PCR[25] |= PORT_PCR_MUX(5);

 	I2C0->F = (I2C_F_ICR(0x10) | I2C_F_MULT(0));

	I2C0->C1 |= (I2C_C1_IICEN_MASK);				//enable i2c and set to master mode

	I2C0->C2 |= (I2C_C2_HDRS_MASK);						// Select high drive mode
}


void i2c_busy(void){					// Start Signal

	lock_detect=0;
	I2C0->C1 &= ~I2C_C1_IICEN_MASK;
	I2C_TRAN;
	I2C_M_START;
	I2C0->C1 |=  I2C_C1_IICEN_MASK;				// Write to clear line

	I2C0->C1 |= I2C_C1_MST_MASK; 			// set MASTER mode
	I2C0->C1 |= I2C_C1_TX_MASK; 			// Set transmit (TX) mode
	I2C0->D = 0xFF;
	while ((I2C0->S & I2C_S_IICIF_MASK) == 0U) {			 // wait interrupt
	}
	I2C0->S |= I2C_S_IICIF_MASK; 				// clear interrupt bit
	I2C0->S |= I2C_S_ARBL_MASK;					// Clear arbitration error flag

	I2C0->C1 &= ~I2C_C1_IICEN_MASK;			// Send start
	I2C0->C1 |= I2C_C1_TX_MASK; 			// Set transmit (TX) mode */
	I2C0->C1 |= I2C_C1_MST_MASK; 			// START signal generated

	I2C0->C1 |= I2C_C1_IICEN_MASK;			// Wait until start is send
	I2C0->C1 &= ~I2C_C1_IICEN_MASK;			// Send stop
	I2C0->C1 |= I2C_C1_MST_MASK;
	I2C0->C1 &= ~I2C_C1_MST_MASK; 			// set SLAVE mode
	I2C0->C1 &= ~I2C_C1_TX_MASK; 			// Set Rx
	I2C0->C1 |= I2C_C1_IICEN_MASK;

	I2C0->S |= I2C_S_IICIF_MASK;			// Clear arbitration error & interrupt flag
	I2C0->S |= I2C_S_ARBL_MASK;
	lock_detect=0;
	i2c_lock=1;
}


void i2c_wait(void) {
	lock_detect = 0;
	while(((I2C0->S & I2C_S_IICIF_MASK)==0) & (lock_detect < 200)) {
		lock_detect++;
	}
	if (lock_detect >= 200)
		i2c_busy();
	I2C0->S |= I2C_S_IICIF_MASK;
}


void i2c_start()					//send start sequence
{
	I2C_TRAN;						//set to transmit mode
	I2C_M_START;					//send start
}

void i2c_read_setup(uint8_t dev, uint8_t address)
{
	I2C0->D = dev;				  // send dev address
	I2C_WAIT					  // wait for completion

	I2C0->D =  address;			  // send read address
	I2C_WAIT					  // wait for completion

	I2C_M_RSTART;				  // repeated start
	I2C0->D = (dev|0x1);	 	  // send dev address (read)
	I2C_WAIT					  // wait for completion

	I2C_REC;					  // set to receive mode

}

uint8_t i2c_repeated_read(uint8_t isLastRead)
{
	uint8_t data;

	lock_detect = 0;

	if(isLastRead)	{
		NACK;								// set NACK after read
	} else	{
		ACK;								// ACK after read
	}

	data = I2C0->D;							// dummy read
	I2C_WAIT								// wait for completion

	if(isLastRead)	{
		I2C_M_STOP;							// send stop
	}
	data = I2C0->D;							// read data

	return  data;
}




uint8_t i2c_read_byte(uint8_t dev, uint8_t address)
{
	uint8_t data;

	I2C_TRAN;							// set to transmit mode
	I2C_M_START;						// send start
	I2C0->D = dev;			  			// send dev address
	I2C_WAIT							// wait for completion

	I2C0->D =  address;					// send read address
	I2C_WAIT							// wait for completion

	I2C_M_RSTART;				   		// repeated start
	I2C0->D = (dev|0x1);	 			// send dev address (read)
	I2C_WAIT							// wait for completion

	I2C_REC;						    // set to recieve mode
	NACK;								// set NACK after read

	data = I2C0->D;						// dummy read
	I2C_WAIT							// wait for completion

	I2C_M_STOP;							// send stop
	data = I2C0->D;						// read data

	return data;
}


void i2c_write_byte(uint8_t dev, uint8_t address, uint8_t data)
{

	I2C_TRAN;							// set to transmit mode
	I2C_M_START;						// send start
	I2C0->D = dev;			  			// send dev address
	I2C_WAIT							// wait for ack

	I2C0->D =  address;					// send write address
	I2C_WAIT

	I2C0->D = data;						// send data
	I2C_WAIT
	I2C_M_STOP;

}
